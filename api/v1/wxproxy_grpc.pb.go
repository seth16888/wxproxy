// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.3
// source: v1/wxproxy.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Mpproxy_GetMaterialCount_FullMethodName        = "/api.wxproxy.v1.Mpproxy/GetMaterialCount"
	Mpproxy_GetMaterialList_FullMethodName         = "/api.wxproxy.v1.Mpproxy/GetMaterialList"
	Mpproxy_GetMemberList_FullMethodName           = "/api.wxproxy.v1.Mpproxy/GetMemberList"
	Mpproxy_GetMemberInfo_FullMethodName           = "/api.wxproxy.v1.Mpproxy/GetMemberInfo"
	Mpproxy_BatchGetMemberInfo_FullMethodName      = "/api.wxproxy.v1.Mpproxy/BatchGetMemberInfo"
	Mpproxy_GetMemberTags_FullMethodName           = "/api.wxproxy.v1.Mpproxy/GetMemberTags"
	Mpproxy_UpdateMemberRemark_FullMethodName      = "/api.wxproxy.v1.Mpproxy/UpdateMemberRemark"
	Mpproxy_GetTagList_FullMethodName              = "/api.wxproxy.v1.Mpproxy/GetTagList"
	Mpproxy_CreateTag_FullMethodName               = "/api.wxproxy.v1.Mpproxy/CreateTag"
	Mpproxy_UpdateTag_FullMethodName               = "/api.wxproxy.v1.Mpproxy/UpdateTag"
	Mpproxy_DeleteTag_FullMethodName               = "/api.wxproxy.v1.Mpproxy/DeleteTag"
	Mpproxy_GetTagMembers_FullMethodName           = "/api.wxproxy.v1.Mpproxy/GetTagMembers"
	Mpproxy_BatchTaggingMembers_FullMethodName     = "/api.wxproxy.v1.Mpproxy/BatchTaggingMembers"
	Mpproxy_BatchUnTaggingMembers_FullMethodName   = "/api.wxproxy.v1.Mpproxy/BatchUnTaggingMembers"
	Mpproxy_CreateTemporaryQRCode_FullMethodName   = "/api.wxproxy.v1.Mpproxy/CreateTemporaryQRCode"
	Mpproxy_CreateLimitQRCode_FullMethodName       = "/api.wxproxy.v1.Mpproxy/CreateLimitQRCode"
	Mpproxy_GenShorten_FullMethodName              = "/api.wxproxy.v1.Mpproxy/GenShorten"
	Mpproxy_FetchShorten_FullMethodName            = "/api.wxproxy.v1.Mpproxy/FetchShorten"
	Mpproxy_GetMenuInfo_FullMethodName             = "/api.wxproxy.v1.Mpproxy/GetMenuInfo"
	Mpproxy_TryMatchMenu_FullMethodName            = "/api.wxproxy.v1.Mpproxy/TryMatchMenu"
	Mpproxy_PullMenu_FullMethodName                = "/api.wxproxy.v1.Mpproxy/PullMenu"
	Mpproxy_CreateMenu_FullMethodName              = "/api.wxproxy.v1.Mpproxy/CreateMenu"
	Mpproxy_CreateConditionalMenu_FullMethodName   = "/api.wxproxy.v1.Mpproxy/CreateConditionalMenu"
	Mpproxy_DeleteConditionalMenu_FullMethodName   = "/api.wxproxy.v1.Mpproxy/DeleteConditionalMenu"
	Mpproxy_DeleteMenu_FullMethodName              = "/api.wxproxy.v1.Mpproxy/DeleteMenu"
	Mpproxy_GetIndustry_FullMethodName             = "/api.wxproxy.v1.Mpproxy/GetIndustry"
	Mpproxy_GetAllPrivateTpl_FullMethodName        = "/api.wxproxy.v1.Mpproxy/GetAllPrivateTpl"
	Mpproxy_SetIndustry_FullMethodName             = "/api.wxproxy.v1.Mpproxy/SetIndustry"
	Mpproxy_GetMessageTplId_FullMethodName         = "/api.wxproxy.v1.Mpproxy/GetMessageTplId"
	Mpproxy_DeleteMessageTpl_FullMethodName        = "/api.wxproxy.v1.Mpproxy/DeleteMessageTpl"
	Mpproxy_SendTplMsg_FullMethodName              = "/api.wxproxy.v1.Mpproxy/SendTplMsg"
	Mpproxy_SendSubscribeMsg_FullMethodName        = "/api.wxproxy.v1.Mpproxy/SendSubscribeMsg"
	Mpproxy_GetBlockedTplMsg_FullMethodName        = "/api.wxproxy.v1.Mpproxy/GetBlockedTplMsg"
	Mpproxy_AddSubscribeTpl_FullMethodName         = "/api.wxproxy.v1.Mpproxy/AddSubscribeTpl"
	Mpproxy_DelSubscribeTpl_FullMethodName         = "/api.wxproxy.v1.Mpproxy/DelSubscribeTpl"
	Mpproxy_GetSubscribeCategory_FullMethodName    = "/api.wxproxy.v1.Mpproxy/GetSubscribeCategory"
	Mpproxy_GetSubscribeTplKeywords_FullMethodName = "/api.wxproxy.v1.Mpproxy/GetSubscribeTplKeywords"
	Mpproxy_GetSubscribeTplTitles_FullMethodName   = "/api.wxproxy.v1.Mpproxy/GetSubscribeTplTitles"
	Mpproxy_GetSubscribePrivateTpl_FullMethodName  = "/api.wxproxy.v1.Mpproxy/GetSubscribePrivateTpl"
	Mpproxy_SendSubscribeMessage_FullMethodName    = "/api.wxproxy.v1.Mpproxy/SendSubscribeMessage"
	Mpproxy_GetKFList_FullMethodName               = "/api.wxproxy.v1.Mpproxy/GetKFList"
	Mpproxy_GetKFOnlineList_FullMethodName         = "/api.wxproxy.v1.Mpproxy/GetKFOnlineList"
	Mpproxy_GetKFMsgHistory_FullMethodName         = "/api.wxproxy.v1.Mpproxy/GetKFMsgHistory"
	Mpproxy_AddKFAccount_FullMethodName            = "/api.wxproxy.v1.Mpproxy/AddKFAccount"
	Mpproxy_UpdateKFAccount_FullMethodName         = "/api.wxproxy.v1.Mpproxy/UpdateKFAccount"
	Mpproxy_DelKFAccount_FullMethodName            = "/api.wxproxy.v1.Mpproxy/DelKFAccount"
	Mpproxy_InviteKFWorker_FullMethodName          = "/api.wxproxy.v1.Mpproxy/InviteKFWorker"
	Mpproxy_UpdateKFAvatar_FullMethodName          = "/api.wxproxy.v1.Mpproxy/UpdateKFAvatar"
	Mpproxy_UpdateKFTyping_FullMethodName          = "/api.wxproxy.v1.Mpproxy/UpdateKFTyping"
	Mpproxy_GetKFSessionList_FullMethodName        = "/api.wxproxy.v1.Mpproxy/GetKFSessionList"
	Mpproxy_GetKFSessionStatus_FullMethodName      = "/api.wxproxy.v1.Mpproxy/GetKFSessionStatus"
	Mpproxy_GetKFSessionUnaccepted_FullMethodName  = "/api.wxproxy.v1.Mpproxy/GetKFSessionUnaccepted"
	Mpproxy_CloseKFSession_FullMethodName          = "/api.wxproxy.v1.Mpproxy/CloseKFSession"
	Mpproxy_NewKFSession_FullMethodName            = "/api.wxproxy.v1.Mpproxy/NewKFSession"
	Mpproxy_SendKFTextMsg_FullMethodName           = "/api.wxproxy.v1.Mpproxy/SendKFTextMsg"
	Mpproxy_SendKFImageMsg_FullMethodName          = "/api.wxproxy.v1.Mpproxy/SendKFImageMsg"
	Mpproxy_SendKFVoiceMsg_FullMethodName          = "/api.wxproxy.v1.Mpproxy/SendKFVoiceMsg"
	Mpproxy_SendKFVideoMsg_FullMethodName          = "/api.wxproxy.v1.Mpproxy/SendKFVideoMsg"
	Mpproxy_SendKFMusicMsg_FullMethodName          = "/api.wxproxy.v1.Mpproxy/SendKFMusicMsg"
	Mpproxy_SendKFNewsCardMsg_FullMethodName       = "/api.wxproxy.v1.Mpproxy/SendKFNewsCardMsg"
	Mpproxy_SendKFNewsPageMsg_FullMethodName       = "/api.wxproxy.v1.Mpproxy/SendKFNewsPageMsg"
	Mpproxy_SendKFToArticleMsg_FullMethodName      = "/api.wxproxy.v1.Mpproxy/SendKFToArticleMsg"
	Mpproxy_SendKFMenuMsg_FullMethodName           = "/api.wxproxy.v1.Mpproxy/SendKFMenuMsg"
	Mpproxy_SendKFCardMsg_FullMethodName           = "/api.wxproxy.v1.Mpproxy/SendKFCardMsg"
	Mpproxy_SendKFMiniProgramMsg_FullMethodName    = "/api.wxproxy.v1.Mpproxy/SendKFMiniProgramMsg"
	Mpproxy_BlockMember_FullMethodName             = "/api.wxproxy.v1.Mpproxy/BlockMember"
	Mpproxy_UnBlockMember_FullMethodName           = "/api.wxproxy.v1.Mpproxy/UnBlockMember"
	Mpproxy_GetBlacklist_FullMethodName            = "/api.wxproxy.v1.Mpproxy/GetBlacklist"
)

// MpproxyClient is the client API for Mpproxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MpproxyClient interface {
	GetMaterialCount(ctx context.Context, in *AccessTokenParam, opts ...grpc.CallOption) (*GetMaterialCountReply, error)
	GetMaterialList(ctx context.Context, in *GetMaterialListRequest, opts ...grpc.CallOption) (*GetMaterialListReply, error)
	GetMemberList(ctx context.Context, in *GetMemberListRequest, opts ...grpc.CallOption) (*GetMemberListReply, error)
	GetMemberInfo(ctx context.Context, in *GetMemberInfoRequest, opts ...grpc.CallOption) (*GetMemberInfoReply, error)
	BatchGetMemberInfo(ctx context.Context, in *BatchGetMemberInfoRequest, opts ...grpc.CallOption) (*BatchGetMemberInfoReply, error)
	GetMemberTags(ctx context.Context, in *GetMemberTagsRequest, opts ...grpc.CallOption) (*GetMemberTagsReply, error)
	UpdateMemberRemark(ctx context.Context, in *UpdateMemberRemarkRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	GetTagList(ctx context.Context, in *AccessTokenParam, opts ...grpc.CallOption) (*GetTagListReply, error)
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagReply, error)
	UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	GetTagMembers(ctx context.Context, in *GetTagMembersRequest, opts ...grpc.CallOption) (*GetTagMembersReply, error)
	BatchTaggingMembers(ctx context.Context, in *BatchTaggingMembersRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	BatchUnTaggingMembers(ctx context.Context, in *BatchUnTaggingMembersRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	CreateTemporaryQRCode(ctx context.Context, in *CreateQRCodeRequest, opts ...grpc.CallOption) (*CreateQRCodeReply, error)
	CreateLimitQRCode(ctx context.Context, in *CreateQRCodeRequest, opts ...grpc.CallOption) (*CreateQRCodeReply, error)
	GenShorten(ctx context.Context, in *GenShortenRequest, opts ...grpc.CallOption) (*GenShortenReply, error)
	FetchShorten(ctx context.Context, in *FetchShortenRequest, opts ...grpc.CallOption) (*FetchShortenReply, error)
	GetMenuInfo(ctx context.Context, in *AccessTokenParam, opts ...grpc.CallOption) (*MenuInfoReply, error)
	TryMatchMenu(ctx context.Context, in *TryMatchMenuRequest, opts ...grpc.CallOption) (*TryMatchMenuReply, error)
	PullMenu(ctx context.Context, in *AccessTokenParam, opts ...grpc.CallOption) (*SelfMenuReply, error)
	CreateMenu(ctx context.Context, in *CreateMenuRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	CreateConditionalMenu(ctx context.Context, in *CreateMenuRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	DeleteConditionalMenu(ctx context.Context, in *DeleteConditionalMenuRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	DeleteMenu(ctx context.Context, in *AccessTokenParam, opts ...grpc.CallOption) (*WXErrorReply, error)
	GetIndustry(ctx context.Context, in *AccessTokenParam, opts ...grpc.CallOption) (*GetIndustryReply, error)
	GetAllPrivateTpl(ctx context.Context, in *AccessTokenParam, opts ...grpc.CallOption) (*GetAllPrivateTplReply, error)
	SetIndustry(ctx context.Context, in *SetIndustryRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	GetMessageTplId(ctx context.Context, in *AddTemplateRequest, opts ...grpc.CallOption) (*AddMessageTplReply, error)
	DeleteMessageTpl(ctx context.Context, in *DeleteMessageTplRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	SendTplMsg(ctx context.Context, in *SendTplMsgRequest, opts ...grpc.CallOption) (*SendTplMsgReply, error)
	SendSubscribeMsg(ctx context.Context, in *SendSubscribeMsgRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	GetBlockedTplMsg(ctx context.Context, in *GetBlockedTplRequest, opts ...grpc.CallOption) (*GetBlockedTplMsgReply, error)
	AddSubscribeTpl(ctx context.Context, in *AddSubscribeTplRequest, opts ...grpc.CallOption) (*AddSubscribeTplReply, error)
	DelSubscribeTpl(ctx context.Context, in *DelSubscribeTplRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	GetSubscribeCategory(ctx context.Context, in *AccessTokenParam, opts ...grpc.CallOption) (*GetSubscribeCategoryReply, error)
	GetSubscribeTplKeywords(ctx context.Context, in *GetSubscribeTplKeywordsRequest, opts ...grpc.CallOption) (*GetSubscribeTplKeywordsReply, error)
	GetSubscribeTplTitles(ctx context.Context, in *GetSubscribeTplTitlesRequest, opts ...grpc.CallOption) (*GetSubscribeTplTitlesReply, error)
	GetSubscribePrivateTpl(ctx context.Context, in *AccessTokenParam, opts ...grpc.CallOption) (*GetSubscribePrivateTplReply, error)
	SendSubscribeMessage(ctx context.Context, in *SendSubscribeMessageRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	// 客服接口
	GetKFList(ctx context.Context, in *AccessTokenParam, opts ...grpc.CallOption) (*GetKFListReply, error)
	GetKFOnlineList(ctx context.Context, in *AccessTokenParam, opts ...grpc.CallOption) (*GetKFOnlineListReply, error)
	GetKFMsgHistory(ctx context.Context, in *GetKFMsgHistoryRequest, opts ...grpc.CallOption) (*GetKFMsgHistoryReply, error)
	AddKFAccount(ctx context.Context, in *AddKFAccountRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	UpdateKFAccount(ctx context.Context, in *UpdateKFAccountRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	DelKFAccount(ctx context.Context, in *DelKFAccountRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	InviteKFWorker(ctx context.Context, in *InviteKFWorkerRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	UpdateKFAvatar(ctx context.Context, in *UpdateKFAvatarRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	UpdateKFTyping(ctx context.Context, in *UpdateKFTypingRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	// 客服会话
	GetKFSessionList(ctx context.Context, in *GetKFSessionListRequest, opts ...grpc.CallOption) (*GetKFSessionListReply, error)
	GetKFSessionStatus(ctx context.Context, in *GetKFSessionStatusRequest, opts ...grpc.CallOption) (*GetKFSessionStatusReply, error)
	GetKFSessionUnaccepted(ctx context.Context, in *AccessTokenParam, opts ...grpc.CallOption) (*GetKFSessionUnacceptedReply, error)
	CloseKFSession(ctx context.Context, in *CloseKFSessionRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	NewKFSession(ctx context.Context, in *NewKFSessionRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	SendKFTextMsg(ctx context.Context, in *SendKFTextMsgRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	SendKFImageMsg(ctx context.Context, in *SendKFImageMsgRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	SendKFVoiceMsg(ctx context.Context, in *SendKFVoiceMsgRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	SendKFVideoMsg(ctx context.Context, in *SendKFVideoMsgRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	SendKFMusicMsg(ctx context.Context, in *SendKFMusicMsgRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	SendKFNewsCardMsg(ctx context.Context, in *SendKFNewsCardMsgRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	SendKFNewsPageMsg(ctx context.Context, in *SendKFNewsPageMsgRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	SendKFToArticleMsg(ctx context.Context, in *SendKFToArticleMsgRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	SendKFMenuMsg(ctx context.Context, in *SendKFMenuMsgRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	SendKFCardMsg(ctx context.Context, in *SendKFCardMsgRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	SendKFMiniProgramMsg(ctx context.Context, in *SendKFMiniProgramMsgRequest, opts ...grpc.CallOption) (*WXErrorReply, error)
	BlockMember(ctx context.Context, in *BlockMemberReq, opts ...grpc.CallOption) (*WXErrorReply, error)
	UnBlockMember(ctx context.Context, in *BlockMemberReq, opts ...grpc.CallOption) (*WXErrorReply, error)
	GetBlacklist(ctx context.Context, in *GetBlacklistReq, opts ...grpc.CallOption) (*GetBlacklistReply, error)
}

type mpproxyClient struct {
	cc grpc.ClientConnInterface
}

func NewMpproxyClient(cc grpc.ClientConnInterface) MpproxyClient {
	return &mpproxyClient{cc}
}

func (c *mpproxyClient) GetMaterialCount(ctx context.Context, in *AccessTokenParam, opts ...grpc.CallOption) (*GetMaterialCountReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMaterialCountReply)
	err := c.cc.Invoke(ctx, Mpproxy_GetMaterialCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) GetMaterialList(ctx context.Context, in *GetMaterialListRequest, opts ...grpc.CallOption) (*GetMaterialListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMaterialListReply)
	err := c.cc.Invoke(ctx, Mpproxy_GetMaterialList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) GetMemberList(ctx context.Context, in *GetMemberListRequest, opts ...grpc.CallOption) (*GetMemberListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMemberListReply)
	err := c.cc.Invoke(ctx, Mpproxy_GetMemberList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) GetMemberInfo(ctx context.Context, in *GetMemberInfoRequest, opts ...grpc.CallOption) (*GetMemberInfoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMemberInfoReply)
	err := c.cc.Invoke(ctx, Mpproxy_GetMemberInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) BatchGetMemberInfo(ctx context.Context, in *BatchGetMemberInfoRequest, opts ...grpc.CallOption) (*BatchGetMemberInfoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchGetMemberInfoReply)
	err := c.cc.Invoke(ctx, Mpproxy_BatchGetMemberInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) GetMemberTags(ctx context.Context, in *GetMemberTagsRequest, opts ...grpc.CallOption) (*GetMemberTagsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMemberTagsReply)
	err := c.cc.Invoke(ctx, Mpproxy_GetMemberTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) UpdateMemberRemark(ctx context.Context, in *UpdateMemberRemarkRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_UpdateMemberRemark_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) GetTagList(ctx context.Context, in *AccessTokenParam, opts ...grpc.CallOption) (*GetTagListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTagListReply)
	err := c.cc.Invoke(ctx, Mpproxy_GetTagList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTagReply)
	err := c.cc.Invoke(ctx, Mpproxy_CreateTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_UpdateTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_DeleteTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) GetTagMembers(ctx context.Context, in *GetTagMembersRequest, opts ...grpc.CallOption) (*GetTagMembersReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTagMembersReply)
	err := c.cc.Invoke(ctx, Mpproxy_GetTagMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) BatchTaggingMembers(ctx context.Context, in *BatchTaggingMembersRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_BatchTaggingMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) BatchUnTaggingMembers(ctx context.Context, in *BatchUnTaggingMembersRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_BatchUnTaggingMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) CreateTemporaryQRCode(ctx context.Context, in *CreateQRCodeRequest, opts ...grpc.CallOption) (*CreateQRCodeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQRCodeReply)
	err := c.cc.Invoke(ctx, Mpproxy_CreateTemporaryQRCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) CreateLimitQRCode(ctx context.Context, in *CreateQRCodeRequest, opts ...grpc.CallOption) (*CreateQRCodeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQRCodeReply)
	err := c.cc.Invoke(ctx, Mpproxy_CreateLimitQRCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) GenShorten(ctx context.Context, in *GenShortenRequest, opts ...grpc.CallOption) (*GenShortenReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenShortenReply)
	err := c.cc.Invoke(ctx, Mpproxy_GenShorten_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) FetchShorten(ctx context.Context, in *FetchShortenRequest, opts ...grpc.CallOption) (*FetchShortenReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchShortenReply)
	err := c.cc.Invoke(ctx, Mpproxy_FetchShorten_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) GetMenuInfo(ctx context.Context, in *AccessTokenParam, opts ...grpc.CallOption) (*MenuInfoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MenuInfoReply)
	err := c.cc.Invoke(ctx, Mpproxy_GetMenuInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) TryMatchMenu(ctx context.Context, in *TryMatchMenuRequest, opts ...grpc.CallOption) (*TryMatchMenuReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TryMatchMenuReply)
	err := c.cc.Invoke(ctx, Mpproxy_TryMatchMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) PullMenu(ctx context.Context, in *AccessTokenParam, opts ...grpc.CallOption) (*SelfMenuReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SelfMenuReply)
	err := c.cc.Invoke(ctx, Mpproxy_PullMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) CreateMenu(ctx context.Context, in *CreateMenuRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_CreateMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) CreateConditionalMenu(ctx context.Context, in *CreateMenuRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_CreateConditionalMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) DeleteConditionalMenu(ctx context.Context, in *DeleteConditionalMenuRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_DeleteConditionalMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) DeleteMenu(ctx context.Context, in *AccessTokenParam, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_DeleteMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) GetIndustry(ctx context.Context, in *AccessTokenParam, opts ...grpc.CallOption) (*GetIndustryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIndustryReply)
	err := c.cc.Invoke(ctx, Mpproxy_GetIndustry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) GetAllPrivateTpl(ctx context.Context, in *AccessTokenParam, opts ...grpc.CallOption) (*GetAllPrivateTplReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllPrivateTplReply)
	err := c.cc.Invoke(ctx, Mpproxy_GetAllPrivateTpl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) SetIndustry(ctx context.Context, in *SetIndustryRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_SetIndustry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) GetMessageTplId(ctx context.Context, in *AddTemplateRequest, opts ...grpc.CallOption) (*AddMessageTplReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMessageTplReply)
	err := c.cc.Invoke(ctx, Mpproxy_GetMessageTplId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) DeleteMessageTpl(ctx context.Context, in *DeleteMessageTplRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_DeleteMessageTpl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) SendTplMsg(ctx context.Context, in *SendTplMsgRequest, opts ...grpc.CallOption) (*SendTplMsgReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendTplMsgReply)
	err := c.cc.Invoke(ctx, Mpproxy_SendTplMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) SendSubscribeMsg(ctx context.Context, in *SendSubscribeMsgRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_SendSubscribeMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) GetBlockedTplMsg(ctx context.Context, in *GetBlockedTplRequest, opts ...grpc.CallOption) (*GetBlockedTplMsgReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlockedTplMsgReply)
	err := c.cc.Invoke(ctx, Mpproxy_GetBlockedTplMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) AddSubscribeTpl(ctx context.Context, in *AddSubscribeTplRequest, opts ...grpc.CallOption) (*AddSubscribeTplReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSubscribeTplReply)
	err := c.cc.Invoke(ctx, Mpproxy_AddSubscribeTpl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) DelSubscribeTpl(ctx context.Context, in *DelSubscribeTplRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_DelSubscribeTpl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) GetSubscribeCategory(ctx context.Context, in *AccessTokenParam, opts ...grpc.CallOption) (*GetSubscribeCategoryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubscribeCategoryReply)
	err := c.cc.Invoke(ctx, Mpproxy_GetSubscribeCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) GetSubscribeTplKeywords(ctx context.Context, in *GetSubscribeTplKeywordsRequest, opts ...grpc.CallOption) (*GetSubscribeTplKeywordsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubscribeTplKeywordsReply)
	err := c.cc.Invoke(ctx, Mpproxy_GetSubscribeTplKeywords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) GetSubscribeTplTitles(ctx context.Context, in *GetSubscribeTplTitlesRequest, opts ...grpc.CallOption) (*GetSubscribeTplTitlesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubscribeTplTitlesReply)
	err := c.cc.Invoke(ctx, Mpproxy_GetSubscribeTplTitles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) GetSubscribePrivateTpl(ctx context.Context, in *AccessTokenParam, opts ...grpc.CallOption) (*GetSubscribePrivateTplReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubscribePrivateTplReply)
	err := c.cc.Invoke(ctx, Mpproxy_GetSubscribePrivateTpl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) SendSubscribeMessage(ctx context.Context, in *SendSubscribeMessageRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_SendSubscribeMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) GetKFList(ctx context.Context, in *AccessTokenParam, opts ...grpc.CallOption) (*GetKFListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKFListReply)
	err := c.cc.Invoke(ctx, Mpproxy_GetKFList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) GetKFOnlineList(ctx context.Context, in *AccessTokenParam, opts ...grpc.CallOption) (*GetKFOnlineListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKFOnlineListReply)
	err := c.cc.Invoke(ctx, Mpproxy_GetKFOnlineList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) GetKFMsgHistory(ctx context.Context, in *GetKFMsgHistoryRequest, opts ...grpc.CallOption) (*GetKFMsgHistoryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKFMsgHistoryReply)
	err := c.cc.Invoke(ctx, Mpproxy_GetKFMsgHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) AddKFAccount(ctx context.Context, in *AddKFAccountRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_AddKFAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) UpdateKFAccount(ctx context.Context, in *UpdateKFAccountRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_UpdateKFAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) DelKFAccount(ctx context.Context, in *DelKFAccountRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_DelKFAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) InviteKFWorker(ctx context.Context, in *InviteKFWorkerRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_InviteKFWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) UpdateKFAvatar(ctx context.Context, in *UpdateKFAvatarRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_UpdateKFAvatar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) UpdateKFTyping(ctx context.Context, in *UpdateKFTypingRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_UpdateKFTyping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) GetKFSessionList(ctx context.Context, in *GetKFSessionListRequest, opts ...grpc.CallOption) (*GetKFSessionListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKFSessionListReply)
	err := c.cc.Invoke(ctx, Mpproxy_GetKFSessionList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) GetKFSessionStatus(ctx context.Context, in *GetKFSessionStatusRequest, opts ...grpc.CallOption) (*GetKFSessionStatusReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKFSessionStatusReply)
	err := c.cc.Invoke(ctx, Mpproxy_GetKFSessionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) GetKFSessionUnaccepted(ctx context.Context, in *AccessTokenParam, opts ...grpc.CallOption) (*GetKFSessionUnacceptedReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKFSessionUnacceptedReply)
	err := c.cc.Invoke(ctx, Mpproxy_GetKFSessionUnaccepted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) CloseKFSession(ctx context.Context, in *CloseKFSessionRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_CloseKFSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) NewKFSession(ctx context.Context, in *NewKFSessionRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_NewKFSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) SendKFTextMsg(ctx context.Context, in *SendKFTextMsgRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_SendKFTextMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) SendKFImageMsg(ctx context.Context, in *SendKFImageMsgRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_SendKFImageMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) SendKFVoiceMsg(ctx context.Context, in *SendKFVoiceMsgRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_SendKFVoiceMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) SendKFVideoMsg(ctx context.Context, in *SendKFVideoMsgRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_SendKFVideoMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) SendKFMusicMsg(ctx context.Context, in *SendKFMusicMsgRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_SendKFMusicMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) SendKFNewsCardMsg(ctx context.Context, in *SendKFNewsCardMsgRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_SendKFNewsCardMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) SendKFNewsPageMsg(ctx context.Context, in *SendKFNewsPageMsgRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_SendKFNewsPageMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) SendKFToArticleMsg(ctx context.Context, in *SendKFToArticleMsgRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_SendKFToArticleMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) SendKFMenuMsg(ctx context.Context, in *SendKFMenuMsgRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_SendKFMenuMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) SendKFCardMsg(ctx context.Context, in *SendKFCardMsgRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_SendKFCardMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) SendKFMiniProgramMsg(ctx context.Context, in *SendKFMiniProgramMsgRequest, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_SendKFMiniProgramMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) BlockMember(ctx context.Context, in *BlockMemberReq, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_BlockMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) UnBlockMember(ctx context.Context, in *BlockMemberReq, opts ...grpc.CallOption) (*WXErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WXErrorReply)
	err := c.cc.Invoke(ctx, Mpproxy_UnBlockMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpproxyClient) GetBlacklist(ctx context.Context, in *GetBlacklistReq, opts ...grpc.CallOption) (*GetBlacklistReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlacklistReply)
	err := c.cc.Invoke(ctx, Mpproxy_GetBlacklist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MpproxyServer is the server API for Mpproxy service.
// All implementations must embed UnimplementedMpproxyServer
// for forward compatibility.
type MpproxyServer interface {
	GetMaterialCount(context.Context, *AccessTokenParam) (*GetMaterialCountReply, error)
	GetMaterialList(context.Context, *GetMaterialListRequest) (*GetMaterialListReply, error)
	GetMemberList(context.Context, *GetMemberListRequest) (*GetMemberListReply, error)
	GetMemberInfo(context.Context, *GetMemberInfoRequest) (*GetMemberInfoReply, error)
	BatchGetMemberInfo(context.Context, *BatchGetMemberInfoRequest) (*BatchGetMemberInfoReply, error)
	GetMemberTags(context.Context, *GetMemberTagsRequest) (*GetMemberTagsReply, error)
	UpdateMemberRemark(context.Context, *UpdateMemberRemarkRequest) (*WXErrorReply, error)
	GetTagList(context.Context, *AccessTokenParam) (*GetTagListReply, error)
	CreateTag(context.Context, *CreateTagRequest) (*CreateTagReply, error)
	UpdateTag(context.Context, *UpdateTagRequest) (*WXErrorReply, error)
	DeleteTag(context.Context, *DeleteTagRequest) (*WXErrorReply, error)
	GetTagMembers(context.Context, *GetTagMembersRequest) (*GetTagMembersReply, error)
	BatchTaggingMembers(context.Context, *BatchTaggingMembersRequest) (*WXErrorReply, error)
	BatchUnTaggingMembers(context.Context, *BatchUnTaggingMembersRequest) (*WXErrorReply, error)
	CreateTemporaryQRCode(context.Context, *CreateQRCodeRequest) (*CreateQRCodeReply, error)
	CreateLimitQRCode(context.Context, *CreateQRCodeRequest) (*CreateQRCodeReply, error)
	GenShorten(context.Context, *GenShortenRequest) (*GenShortenReply, error)
	FetchShorten(context.Context, *FetchShortenRequest) (*FetchShortenReply, error)
	GetMenuInfo(context.Context, *AccessTokenParam) (*MenuInfoReply, error)
	TryMatchMenu(context.Context, *TryMatchMenuRequest) (*TryMatchMenuReply, error)
	PullMenu(context.Context, *AccessTokenParam) (*SelfMenuReply, error)
	CreateMenu(context.Context, *CreateMenuRequest) (*WXErrorReply, error)
	CreateConditionalMenu(context.Context, *CreateMenuRequest) (*WXErrorReply, error)
	DeleteConditionalMenu(context.Context, *DeleteConditionalMenuRequest) (*WXErrorReply, error)
	DeleteMenu(context.Context, *AccessTokenParam) (*WXErrorReply, error)
	GetIndustry(context.Context, *AccessTokenParam) (*GetIndustryReply, error)
	GetAllPrivateTpl(context.Context, *AccessTokenParam) (*GetAllPrivateTplReply, error)
	SetIndustry(context.Context, *SetIndustryRequest) (*WXErrorReply, error)
	GetMessageTplId(context.Context, *AddTemplateRequest) (*AddMessageTplReply, error)
	DeleteMessageTpl(context.Context, *DeleteMessageTplRequest) (*WXErrorReply, error)
	SendTplMsg(context.Context, *SendTplMsgRequest) (*SendTplMsgReply, error)
	SendSubscribeMsg(context.Context, *SendSubscribeMsgRequest) (*WXErrorReply, error)
	GetBlockedTplMsg(context.Context, *GetBlockedTplRequest) (*GetBlockedTplMsgReply, error)
	AddSubscribeTpl(context.Context, *AddSubscribeTplRequest) (*AddSubscribeTplReply, error)
	DelSubscribeTpl(context.Context, *DelSubscribeTplRequest) (*WXErrorReply, error)
	GetSubscribeCategory(context.Context, *AccessTokenParam) (*GetSubscribeCategoryReply, error)
	GetSubscribeTplKeywords(context.Context, *GetSubscribeTplKeywordsRequest) (*GetSubscribeTplKeywordsReply, error)
	GetSubscribeTplTitles(context.Context, *GetSubscribeTplTitlesRequest) (*GetSubscribeTplTitlesReply, error)
	GetSubscribePrivateTpl(context.Context, *AccessTokenParam) (*GetSubscribePrivateTplReply, error)
	SendSubscribeMessage(context.Context, *SendSubscribeMessageRequest) (*WXErrorReply, error)
	// 客服接口
	GetKFList(context.Context, *AccessTokenParam) (*GetKFListReply, error)
	GetKFOnlineList(context.Context, *AccessTokenParam) (*GetKFOnlineListReply, error)
	GetKFMsgHistory(context.Context, *GetKFMsgHistoryRequest) (*GetKFMsgHistoryReply, error)
	AddKFAccount(context.Context, *AddKFAccountRequest) (*WXErrorReply, error)
	UpdateKFAccount(context.Context, *UpdateKFAccountRequest) (*WXErrorReply, error)
	DelKFAccount(context.Context, *DelKFAccountRequest) (*WXErrorReply, error)
	InviteKFWorker(context.Context, *InviteKFWorkerRequest) (*WXErrorReply, error)
	UpdateKFAvatar(context.Context, *UpdateKFAvatarRequest) (*WXErrorReply, error)
	UpdateKFTyping(context.Context, *UpdateKFTypingRequest) (*WXErrorReply, error)
	// 客服会话
	GetKFSessionList(context.Context, *GetKFSessionListRequest) (*GetKFSessionListReply, error)
	GetKFSessionStatus(context.Context, *GetKFSessionStatusRequest) (*GetKFSessionStatusReply, error)
	GetKFSessionUnaccepted(context.Context, *AccessTokenParam) (*GetKFSessionUnacceptedReply, error)
	CloseKFSession(context.Context, *CloseKFSessionRequest) (*WXErrorReply, error)
	NewKFSession(context.Context, *NewKFSessionRequest) (*WXErrorReply, error)
	SendKFTextMsg(context.Context, *SendKFTextMsgRequest) (*WXErrorReply, error)
	SendKFImageMsg(context.Context, *SendKFImageMsgRequest) (*WXErrorReply, error)
	SendKFVoiceMsg(context.Context, *SendKFVoiceMsgRequest) (*WXErrorReply, error)
	SendKFVideoMsg(context.Context, *SendKFVideoMsgRequest) (*WXErrorReply, error)
	SendKFMusicMsg(context.Context, *SendKFMusicMsgRequest) (*WXErrorReply, error)
	SendKFNewsCardMsg(context.Context, *SendKFNewsCardMsgRequest) (*WXErrorReply, error)
	SendKFNewsPageMsg(context.Context, *SendKFNewsPageMsgRequest) (*WXErrorReply, error)
	SendKFToArticleMsg(context.Context, *SendKFToArticleMsgRequest) (*WXErrorReply, error)
	SendKFMenuMsg(context.Context, *SendKFMenuMsgRequest) (*WXErrorReply, error)
	SendKFCardMsg(context.Context, *SendKFCardMsgRequest) (*WXErrorReply, error)
	SendKFMiniProgramMsg(context.Context, *SendKFMiniProgramMsgRequest) (*WXErrorReply, error)
	BlockMember(context.Context, *BlockMemberReq) (*WXErrorReply, error)
	UnBlockMember(context.Context, *BlockMemberReq) (*WXErrorReply, error)
	GetBlacklist(context.Context, *GetBlacklistReq) (*GetBlacklistReply, error)
	mustEmbedUnimplementedMpproxyServer()
}

// UnimplementedMpproxyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMpproxyServer struct{}

func (UnimplementedMpproxyServer) GetMaterialCount(context.Context, *AccessTokenParam) (*GetMaterialCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaterialCount not implemented")
}
func (UnimplementedMpproxyServer) GetMaterialList(context.Context, *GetMaterialListRequest) (*GetMaterialListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaterialList not implemented")
}
func (UnimplementedMpproxyServer) GetMemberList(context.Context, *GetMemberListRequest) (*GetMemberListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberList not implemented")
}
func (UnimplementedMpproxyServer) GetMemberInfo(context.Context, *GetMemberInfoRequest) (*GetMemberInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberInfo not implemented")
}
func (UnimplementedMpproxyServer) BatchGetMemberInfo(context.Context, *BatchGetMemberInfoRequest) (*BatchGetMemberInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetMemberInfo not implemented")
}
func (UnimplementedMpproxyServer) GetMemberTags(context.Context, *GetMemberTagsRequest) (*GetMemberTagsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberTags not implemented")
}
func (UnimplementedMpproxyServer) UpdateMemberRemark(context.Context, *UpdateMemberRemarkRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberRemark not implemented")
}
func (UnimplementedMpproxyServer) GetTagList(context.Context, *AccessTokenParam) (*GetTagListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagList not implemented")
}
func (UnimplementedMpproxyServer) CreateTag(context.Context, *CreateTagRequest) (*CreateTagReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedMpproxyServer) UpdateTag(context.Context, *UpdateTagRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (UnimplementedMpproxyServer) DeleteTag(context.Context, *DeleteTagRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (UnimplementedMpproxyServer) GetTagMembers(context.Context, *GetTagMembersRequest) (*GetTagMembersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagMembers not implemented")
}
func (UnimplementedMpproxyServer) BatchTaggingMembers(context.Context, *BatchTaggingMembersRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchTaggingMembers not implemented")
}
func (UnimplementedMpproxyServer) BatchUnTaggingMembers(context.Context, *BatchUnTaggingMembersRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUnTaggingMembers not implemented")
}
func (UnimplementedMpproxyServer) CreateTemporaryQRCode(context.Context, *CreateQRCodeRequest) (*CreateQRCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemporaryQRCode not implemented")
}
func (UnimplementedMpproxyServer) CreateLimitQRCode(context.Context, *CreateQRCodeRequest) (*CreateQRCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLimitQRCode not implemented")
}
func (UnimplementedMpproxyServer) GenShorten(context.Context, *GenShortenRequest) (*GenShortenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenShorten not implemented")
}
func (UnimplementedMpproxyServer) FetchShorten(context.Context, *FetchShortenRequest) (*FetchShortenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchShorten not implemented")
}
func (UnimplementedMpproxyServer) GetMenuInfo(context.Context, *AccessTokenParam) (*MenuInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuInfo not implemented")
}
func (UnimplementedMpproxyServer) TryMatchMenu(context.Context, *TryMatchMenuRequest) (*TryMatchMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TryMatchMenu not implemented")
}
func (UnimplementedMpproxyServer) PullMenu(context.Context, *AccessTokenParam) (*SelfMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullMenu not implemented")
}
func (UnimplementedMpproxyServer) CreateMenu(context.Context, *CreateMenuRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenu not implemented")
}
func (UnimplementedMpproxyServer) CreateConditionalMenu(context.Context, *CreateMenuRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConditionalMenu not implemented")
}
func (UnimplementedMpproxyServer) DeleteConditionalMenu(context.Context, *DeleteConditionalMenuRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConditionalMenu not implemented")
}
func (UnimplementedMpproxyServer) DeleteMenu(context.Context, *AccessTokenParam) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenu not implemented")
}
func (UnimplementedMpproxyServer) GetIndustry(context.Context, *AccessTokenParam) (*GetIndustryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndustry not implemented")
}
func (UnimplementedMpproxyServer) GetAllPrivateTpl(context.Context, *AccessTokenParam) (*GetAllPrivateTplReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPrivateTpl not implemented")
}
func (UnimplementedMpproxyServer) SetIndustry(context.Context, *SetIndustryRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIndustry not implemented")
}
func (UnimplementedMpproxyServer) GetMessageTplId(context.Context, *AddTemplateRequest) (*AddMessageTplReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageTplId not implemented")
}
func (UnimplementedMpproxyServer) DeleteMessageTpl(context.Context, *DeleteMessageTplRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessageTpl not implemented")
}
func (UnimplementedMpproxyServer) SendTplMsg(context.Context, *SendTplMsgRequest) (*SendTplMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTplMsg not implemented")
}
func (UnimplementedMpproxyServer) SendSubscribeMsg(context.Context, *SendSubscribeMsgRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSubscribeMsg not implemented")
}
func (UnimplementedMpproxyServer) GetBlockedTplMsg(context.Context, *GetBlockedTplRequest) (*GetBlockedTplMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockedTplMsg not implemented")
}
func (UnimplementedMpproxyServer) AddSubscribeTpl(context.Context, *AddSubscribeTplRequest) (*AddSubscribeTplReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubscribeTpl not implemented")
}
func (UnimplementedMpproxyServer) DelSubscribeTpl(context.Context, *DelSubscribeTplRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSubscribeTpl not implemented")
}
func (UnimplementedMpproxyServer) GetSubscribeCategory(context.Context, *AccessTokenParam) (*GetSubscribeCategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscribeCategory not implemented")
}
func (UnimplementedMpproxyServer) GetSubscribeTplKeywords(context.Context, *GetSubscribeTplKeywordsRequest) (*GetSubscribeTplKeywordsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscribeTplKeywords not implemented")
}
func (UnimplementedMpproxyServer) GetSubscribeTplTitles(context.Context, *GetSubscribeTplTitlesRequest) (*GetSubscribeTplTitlesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscribeTplTitles not implemented")
}
func (UnimplementedMpproxyServer) GetSubscribePrivateTpl(context.Context, *AccessTokenParam) (*GetSubscribePrivateTplReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscribePrivateTpl not implemented")
}
func (UnimplementedMpproxyServer) SendSubscribeMessage(context.Context, *SendSubscribeMessageRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSubscribeMessage not implemented")
}
func (UnimplementedMpproxyServer) GetKFList(context.Context, *AccessTokenParam) (*GetKFListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKFList not implemented")
}
func (UnimplementedMpproxyServer) GetKFOnlineList(context.Context, *AccessTokenParam) (*GetKFOnlineListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKFOnlineList not implemented")
}
func (UnimplementedMpproxyServer) GetKFMsgHistory(context.Context, *GetKFMsgHistoryRequest) (*GetKFMsgHistoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKFMsgHistory not implemented")
}
func (UnimplementedMpproxyServer) AddKFAccount(context.Context, *AddKFAccountRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKFAccount not implemented")
}
func (UnimplementedMpproxyServer) UpdateKFAccount(context.Context, *UpdateKFAccountRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKFAccount not implemented")
}
func (UnimplementedMpproxyServer) DelKFAccount(context.Context, *DelKFAccountRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelKFAccount not implemented")
}
func (UnimplementedMpproxyServer) InviteKFWorker(context.Context, *InviteKFWorkerRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteKFWorker not implemented")
}
func (UnimplementedMpproxyServer) UpdateKFAvatar(context.Context, *UpdateKFAvatarRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKFAvatar not implemented")
}
func (UnimplementedMpproxyServer) UpdateKFTyping(context.Context, *UpdateKFTypingRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKFTyping not implemented")
}
func (UnimplementedMpproxyServer) GetKFSessionList(context.Context, *GetKFSessionListRequest) (*GetKFSessionListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKFSessionList not implemented")
}
func (UnimplementedMpproxyServer) GetKFSessionStatus(context.Context, *GetKFSessionStatusRequest) (*GetKFSessionStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKFSessionStatus not implemented")
}
func (UnimplementedMpproxyServer) GetKFSessionUnaccepted(context.Context, *AccessTokenParam) (*GetKFSessionUnacceptedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKFSessionUnaccepted not implemented")
}
func (UnimplementedMpproxyServer) CloseKFSession(context.Context, *CloseKFSessionRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseKFSession not implemented")
}
func (UnimplementedMpproxyServer) NewKFSession(context.Context, *NewKFSessionRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewKFSession not implemented")
}
func (UnimplementedMpproxyServer) SendKFTextMsg(context.Context, *SendKFTextMsgRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKFTextMsg not implemented")
}
func (UnimplementedMpproxyServer) SendKFImageMsg(context.Context, *SendKFImageMsgRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKFImageMsg not implemented")
}
func (UnimplementedMpproxyServer) SendKFVoiceMsg(context.Context, *SendKFVoiceMsgRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKFVoiceMsg not implemented")
}
func (UnimplementedMpproxyServer) SendKFVideoMsg(context.Context, *SendKFVideoMsgRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKFVideoMsg not implemented")
}
func (UnimplementedMpproxyServer) SendKFMusicMsg(context.Context, *SendKFMusicMsgRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKFMusicMsg not implemented")
}
func (UnimplementedMpproxyServer) SendKFNewsCardMsg(context.Context, *SendKFNewsCardMsgRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKFNewsCardMsg not implemented")
}
func (UnimplementedMpproxyServer) SendKFNewsPageMsg(context.Context, *SendKFNewsPageMsgRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKFNewsPageMsg not implemented")
}
func (UnimplementedMpproxyServer) SendKFToArticleMsg(context.Context, *SendKFToArticleMsgRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKFToArticleMsg not implemented")
}
func (UnimplementedMpproxyServer) SendKFMenuMsg(context.Context, *SendKFMenuMsgRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKFMenuMsg not implemented")
}
func (UnimplementedMpproxyServer) SendKFCardMsg(context.Context, *SendKFCardMsgRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKFCardMsg not implemented")
}
func (UnimplementedMpproxyServer) SendKFMiniProgramMsg(context.Context, *SendKFMiniProgramMsgRequest) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKFMiniProgramMsg not implemented")
}
func (UnimplementedMpproxyServer) BlockMember(context.Context, *BlockMemberReq) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockMember not implemented")
}
func (UnimplementedMpproxyServer) UnBlockMember(context.Context, *BlockMemberReq) (*WXErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBlockMember not implemented")
}
func (UnimplementedMpproxyServer) GetBlacklist(context.Context, *GetBlacklistReq) (*GetBlacklistReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlacklist not implemented")
}
func (UnimplementedMpproxyServer) mustEmbedUnimplementedMpproxyServer() {}
func (UnimplementedMpproxyServer) testEmbeddedByValue()                 {}

// UnsafeMpproxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MpproxyServer will
// result in compilation errors.
type UnsafeMpproxyServer interface {
	mustEmbedUnimplementedMpproxyServer()
}

func RegisterMpproxyServer(s grpc.ServiceRegistrar, srv MpproxyServer) {
	// If the following call pancis, it indicates UnimplementedMpproxyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Mpproxy_ServiceDesc, srv)
}

func _Mpproxy_GetMaterialCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessTokenParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).GetMaterialCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_GetMaterialCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).GetMaterialCount(ctx, req.(*AccessTokenParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_GetMaterialList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaterialListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).GetMaterialList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_GetMaterialList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).GetMaterialList(ctx, req.(*GetMaterialListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_GetMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).GetMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_GetMemberList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).GetMemberList(ctx, req.(*GetMemberListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_GetMemberInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).GetMemberInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_GetMemberInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).GetMemberInfo(ctx, req.(*GetMemberInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_BatchGetMemberInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetMemberInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).BatchGetMemberInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_BatchGetMemberInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).BatchGetMemberInfo(ctx, req.(*BatchGetMemberInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_GetMemberTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).GetMemberTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_GetMemberTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).GetMemberTags(ctx, req.(*GetMemberTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_UpdateMemberRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberRemarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).UpdateMemberRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_UpdateMemberRemark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).UpdateMemberRemark(ctx, req.(*UpdateMemberRemarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_GetTagList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessTokenParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).GetTagList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_GetTagList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).GetTagList(ctx, req.(*AccessTokenParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_CreateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).CreateTag(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_UpdateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).UpdateTag(ctx, req.(*UpdateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_DeleteTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).DeleteTag(ctx, req.(*DeleteTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_GetTagMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).GetTagMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_GetTagMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).GetTagMembers(ctx, req.(*GetTagMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_BatchTaggingMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchTaggingMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).BatchTaggingMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_BatchTaggingMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).BatchTaggingMembers(ctx, req.(*BatchTaggingMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_BatchUnTaggingMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUnTaggingMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).BatchUnTaggingMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_BatchUnTaggingMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).BatchUnTaggingMembers(ctx, req.(*BatchUnTaggingMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_CreateTemporaryQRCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQRCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).CreateTemporaryQRCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_CreateTemporaryQRCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).CreateTemporaryQRCode(ctx, req.(*CreateQRCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_CreateLimitQRCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQRCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).CreateLimitQRCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_CreateLimitQRCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).CreateLimitQRCode(ctx, req.(*CreateQRCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_GenShorten_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenShortenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).GenShorten(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_GenShorten_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).GenShorten(ctx, req.(*GenShortenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_FetchShorten_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchShortenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).FetchShorten(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_FetchShorten_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).FetchShorten(ctx, req.(*FetchShortenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_GetMenuInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessTokenParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).GetMenuInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_GetMenuInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).GetMenuInfo(ctx, req.(*AccessTokenParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_TryMatchMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TryMatchMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).TryMatchMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_TryMatchMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).TryMatchMenu(ctx, req.(*TryMatchMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_PullMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessTokenParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).PullMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_PullMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).PullMenu(ctx, req.(*AccessTokenParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_CreateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).CreateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_CreateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).CreateMenu(ctx, req.(*CreateMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_CreateConditionalMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).CreateConditionalMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_CreateConditionalMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).CreateConditionalMenu(ctx, req.(*CreateMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_DeleteConditionalMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConditionalMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).DeleteConditionalMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_DeleteConditionalMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).DeleteConditionalMenu(ctx, req.(*DeleteConditionalMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_DeleteMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessTokenParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).DeleteMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_DeleteMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).DeleteMenu(ctx, req.(*AccessTokenParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_GetIndustry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessTokenParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).GetIndustry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_GetIndustry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).GetIndustry(ctx, req.(*AccessTokenParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_GetAllPrivateTpl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessTokenParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).GetAllPrivateTpl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_GetAllPrivateTpl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).GetAllPrivateTpl(ctx, req.(*AccessTokenParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_SetIndustry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIndustryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).SetIndustry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_SetIndustry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).SetIndustry(ctx, req.(*SetIndustryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_GetMessageTplId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).GetMessageTplId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_GetMessageTplId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).GetMessageTplId(ctx, req.(*AddTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_DeleteMessageTpl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageTplRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).DeleteMessageTpl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_DeleteMessageTpl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).DeleteMessageTpl(ctx, req.(*DeleteMessageTplRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_SendTplMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTplMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).SendTplMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_SendTplMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).SendTplMsg(ctx, req.(*SendTplMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_SendSubscribeMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSubscribeMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).SendSubscribeMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_SendSubscribeMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).SendSubscribeMsg(ctx, req.(*SendSubscribeMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_GetBlockedTplMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockedTplRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).GetBlockedTplMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_GetBlockedTplMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).GetBlockedTplMsg(ctx, req.(*GetBlockedTplRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_AddSubscribeTpl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSubscribeTplRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).AddSubscribeTpl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_AddSubscribeTpl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).AddSubscribeTpl(ctx, req.(*AddSubscribeTplRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_DelSubscribeTpl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSubscribeTplRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).DelSubscribeTpl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_DelSubscribeTpl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).DelSubscribeTpl(ctx, req.(*DelSubscribeTplRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_GetSubscribeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessTokenParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).GetSubscribeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_GetSubscribeCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).GetSubscribeCategory(ctx, req.(*AccessTokenParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_GetSubscribeTplKeywords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscribeTplKeywordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).GetSubscribeTplKeywords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_GetSubscribeTplKeywords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).GetSubscribeTplKeywords(ctx, req.(*GetSubscribeTplKeywordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_GetSubscribeTplTitles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscribeTplTitlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).GetSubscribeTplTitles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_GetSubscribeTplTitles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).GetSubscribeTplTitles(ctx, req.(*GetSubscribeTplTitlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_GetSubscribePrivateTpl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessTokenParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).GetSubscribePrivateTpl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_GetSubscribePrivateTpl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).GetSubscribePrivateTpl(ctx, req.(*AccessTokenParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_SendSubscribeMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSubscribeMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).SendSubscribeMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_SendSubscribeMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).SendSubscribeMessage(ctx, req.(*SendSubscribeMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_GetKFList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessTokenParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).GetKFList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_GetKFList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).GetKFList(ctx, req.(*AccessTokenParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_GetKFOnlineList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessTokenParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).GetKFOnlineList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_GetKFOnlineList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).GetKFOnlineList(ctx, req.(*AccessTokenParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_GetKFMsgHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKFMsgHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).GetKFMsgHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_GetKFMsgHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).GetKFMsgHistory(ctx, req.(*GetKFMsgHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_AddKFAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddKFAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).AddKFAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_AddKFAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).AddKFAccount(ctx, req.(*AddKFAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_UpdateKFAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKFAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).UpdateKFAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_UpdateKFAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).UpdateKFAccount(ctx, req.(*UpdateKFAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_DelKFAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelKFAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).DelKFAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_DelKFAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).DelKFAccount(ctx, req.(*DelKFAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_InviteKFWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteKFWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).InviteKFWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_InviteKFWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).InviteKFWorker(ctx, req.(*InviteKFWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_UpdateKFAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKFAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).UpdateKFAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_UpdateKFAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).UpdateKFAvatar(ctx, req.(*UpdateKFAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_UpdateKFTyping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKFTypingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).UpdateKFTyping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_UpdateKFTyping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).UpdateKFTyping(ctx, req.(*UpdateKFTypingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_GetKFSessionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKFSessionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).GetKFSessionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_GetKFSessionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).GetKFSessionList(ctx, req.(*GetKFSessionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_GetKFSessionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKFSessionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).GetKFSessionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_GetKFSessionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).GetKFSessionStatus(ctx, req.(*GetKFSessionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_GetKFSessionUnaccepted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessTokenParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).GetKFSessionUnaccepted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_GetKFSessionUnaccepted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).GetKFSessionUnaccepted(ctx, req.(*AccessTokenParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_CloseKFSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseKFSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).CloseKFSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_CloseKFSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).CloseKFSession(ctx, req.(*CloseKFSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_NewKFSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewKFSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).NewKFSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_NewKFSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).NewKFSession(ctx, req.(*NewKFSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_SendKFTextMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendKFTextMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).SendKFTextMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_SendKFTextMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).SendKFTextMsg(ctx, req.(*SendKFTextMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_SendKFImageMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendKFImageMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).SendKFImageMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_SendKFImageMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).SendKFImageMsg(ctx, req.(*SendKFImageMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_SendKFVoiceMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendKFVoiceMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).SendKFVoiceMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_SendKFVoiceMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).SendKFVoiceMsg(ctx, req.(*SendKFVoiceMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_SendKFVideoMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendKFVideoMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).SendKFVideoMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_SendKFVideoMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).SendKFVideoMsg(ctx, req.(*SendKFVideoMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_SendKFMusicMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendKFMusicMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).SendKFMusicMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_SendKFMusicMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).SendKFMusicMsg(ctx, req.(*SendKFMusicMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_SendKFNewsCardMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendKFNewsCardMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).SendKFNewsCardMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_SendKFNewsCardMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).SendKFNewsCardMsg(ctx, req.(*SendKFNewsCardMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_SendKFNewsPageMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendKFNewsPageMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).SendKFNewsPageMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_SendKFNewsPageMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).SendKFNewsPageMsg(ctx, req.(*SendKFNewsPageMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_SendKFToArticleMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendKFToArticleMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).SendKFToArticleMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_SendKFToArticleMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).SendKFToArticleMsg(ctx, req.(*SendKFToArticleMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_SendKFMenuMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendKFMenuMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).SendKFMenuMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_SendKFMenuMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).SendKFMenuMsg(ctx, req.(*SendKFMenuMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_SendKFCardMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendKFCardMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).SendKFCardMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_SendKFCardMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).SendKFCardMsg(ctx, req.(*SendKFCardMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_SendKFMiniProgramMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendKFMiniProgramMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).SendKFMiniProgramMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_SendKFMiniProgramMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).SendKFMiniProgramMsg(ctx, req.(*SendKFMiniProgramMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_BlockMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).BlockMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_BlockMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).BlockMember(ctx, req.(*BlockMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_UnBlockMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).UnBlockMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_UnBlockMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).UnBlockMember(ctx, req.(*BlockMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpproxy_GetBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlacklistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpproxyServer).GetBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpproxy_GetBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpproxyServer).GetBlacklist(ctx, req.(*GetBlacklistReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Mpproxy_ServiceDesc is the grpc.ServiceDesc for Mpproxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mpproxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.wxproxy.v1.Mpproxy",
	HandlerType: (*MpproxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMaterialCount",
			Handler:    _Mpproxy_GetMaterialCount_Handler,
		},
		{
			MethodName: "GetMaterialList",
			Handler:    _Mpproxy_GetMaterialList_Handler,
		},
		{
			MethodName: "GetMemberList",
			Handler:    _Mpproxy_GetMemberList_Handler,
		},
		{
			MethodName: "GetMemberInfo",
			Handler:    _Mpproxy_GetMemberInfo_Handler,
		},
		{
			MethodName: "BatchGetMemberInfo",
			Handler:    _Mpproxy_BatchGetMemberInfo_Handler,
		},
		{
			MethodName: "GetMemberTags",
			Handler:    _Mpproxy_GetMemberTags_Handler,
		},
		{
			MethodName: "UpdateMemberRemark",
			Handler:    _Mpproxy_UpdateMemberRemark_Handler,
		},
		{
			MethodName: "GetTagList",
			Handler:    _Mpproxy_GetTagList_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _Mpproxy_CreateTag_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _Mpproxy_UpdateTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _Mpproxy_DeleteTag_Handler,
		},
		{
			MethodName: "GetTagMembers",
			Handler:    _Mpproxy_GetTagMembers_Handler,
		},
		{
			MethodName: "BatchTaggingMembers",
			Handler:    _Mpproxy_BatchTaggingMembers_Handler,
		},
		{
			MethodName: "BatchUnTaggingMembers",
			Handler:    _Mpproxy_BatchUnTaggingMembers_Handler,
		},
		{
			MethodName: "CreateTemporaryQRCode",
			Handler:    _Mpproxy_CreateTemporaryQRCode_Handler,
		},
		{
			MethodName: "CreateLimitQRCode",
			Handler:    _Mpproxy_CreateLimitQRCode_Handler,
		},
		{
			MethodName: "GenShorten",
			Handler:    _Mpproxy_GenShorten_Handler,
		},
		{
			MethodName: "FetchShorten",
			Handler:    _Mpproxy_FetchShorten_Handler,
		},
		{
			MethodName: "GetMenuInfo",
			Handler:    _Mpproxy_GetMenuInfo_Handler,
		},
		{
			MethodName: "TryMatchMenu",
			Handler:    _Mpproxy_TryMatchMenu_Handler,
		},
		{
			MethodName: "PullMenu",
			Handler:    _Mpproxy_PullMenu_Handler,
		},
		{
			MethodName: "CreateMenu",
			Handler:    _Mpproxy_CreateMenu_Handler,
		},
		{
			MethodName: "CreateConditionalMenu",
			Handler:    _Mpproxy_CreateConditionalMenu_Handler,
		},
		{
			MethodName: "DeleteConditionalMenu",
			Handler:    _Mpproxy_DeleteConditionalMenu_Handler,
		},
		{
			MethodName: "DeleteMenu",
			Handler:    _Mpproxy_DeleteMenu_Handler,
		},
		{
			MethodName: "GetIndustry",
			Handler:    _Mpproxy_GetIndustry_Handler,
		},
		{
			MethodName: "GetAllPrivateTpl",
			Handler:    _Mpproxy_GetAllPrivateTpl_Handler,
		},
		{
			MethodName: "SetIndustry",
			Handler:    _Mpproxy_SetIndustry_Handler,
		},
		{
			MethodName: "GetMessageTplId",
			Handler:    _Mpproxy_GetMessageTplId_Handler,
		},
		{
			MethodName: "DeleteMessageTpl",
			Handler:    _Mpproxy_DeleteMessageTpl_Handler,
		},
		{
			MethodName: "SendTplMsg",
			Handler:    _Mpproxy_SendTplMsg_Handler,
		},
		{
			MethodName: "SendSubscribeMsg",
			Handler:    _Mpproxy_SendSubscribeMsg_Handler,
		},
		{
			MethodName: "GetBlockedTplMsg",
			Handler:    _Mpproxy_GetBlockedTplMsg_Handler,
		},
		{
			MethodName: "AddSubscribeTpl",
			Handler:    _Mpproxy_AddSubscribeTpl_Handler,
		},
		{
			MethodName: "DelSubscribeTpl",
			Handler:    _Mpproxy_DelSubscribeTpl_Handler,
		},
		{
			MethodName: "GetSubscribeCategory",
			Handler:    _Mpproxy_GetSubscribeCategory_Handler,
		},
		{
			MethodName: "GetSubscribeTplKeywords",
			Handler:    _Mpproxy_GetSubscribeTplKeywords_Handler,
		},
		{
			MethodName: "GetSubscribeTplTitles",
			Handler:    _Mpproxy_GetSubscribeTplTitles_Handler,
		},
		{
			MethodName: "GetSubscribePrivateTpl",
			Handler:    _Mpproxy_GetSubscribePrivateTpl_Handler,
		},
		{
			MethodName: "SendSubscribeMessage",
			Handler:    _Mpproxy_SendSubscribeMessage_Handler,
		},
		{
			MethodName: "GetKFList",
			Handler:    _Mpproxy_GetKFList_Handler,
		},
		{
			MethodName: "GetKFOnlineList",
			Handler:    _Mpproxy_GetKFOnlineList_Handler,
		},
		{
			MethodName: "GetKFMsgHistory",
			Handler:    _Mpproxy_GetKFMsgHistory_Handler,
		},
		{
			MethodName: "AddKFAccount",
			Handler:    _Mpproxy_AddKFAccount_Handler,
		},
		{
			MethodName: "UpdateKFAccount",
			Handler:    _Mpproxy_UpdateKFAccount_Handler,
		},
		{
			MethodName: "DelKFAccount",
			Handler:    _Mpproxy_DelKFAccount_Handler,
		},
		{
			MethodName: "InviteKFWorker",
			Handler:    _Mpproxy_InviteKFWorker_Handler,
		},
		{
			MethodName: "UpdateKFAvatar",
			Handler:    _Mpproxy_UpdateKFAvatar_Handler,
		},
		{
			MethodName: "UpdateKFTyping",
			Handler:    _Mpproxy_UpdateKFTyping_Handler,
		},
		{
			MethodName: "GetKFSessionList",
			Handler:    _Mpproxy_GetKFSessionList_Handler,
		},
		{
			MethodName: "GetKFSessionStatus",
			Handler:    _Mpproxy_GetKFSessionStatus_Handler,
		},
		{
			MethodName: "GetKFSessionUnaccepted",
			Handler:    _Mpproxy_GetKFSessionUnaccepted_Handler,
		},
		{
			MethodName: "CloseKFSession",
			Handler:    _Mpproxy_CloseKFSession_Handler,
		},
		{
			MethodName: "NewKFSession",
			Handler:    _Mpproxy_NewKFSession_Handler,
		},
		{
			MethodName: "SendKFTextMsg",
			Handler:    _Mpproxy_SendKFTextMsg_Handler,
		},
		{
			MethodName: "SendKFImageMsg",
			Handler:    _Mpproxy_SendKFImageMsg_Handler,
		},
		{
			MethodName: "SendKFVoiceMsg",
			Handler:    _Mpproxy_SendKFVoiceMsg_Handler,
		},
		{
			MethodName: "SendKFVideoMsg",
			Handler:    _Mpproxy_SendKFVideoMsg_Handler,
		},
		{
			MethodName: "SendKFMusicMsg",
			Handler:    _Mpproxy_SendKFMusicMsg_Handler,
		},
		{
			MethodName: "SendKFNewsCardMsg",
			Handler:    _Mpproxy_SendKFNewsCardMsg_Handler,
		},
		{
			MethodName: "SendKFNewsPageMsg",
			Handler:    _Mpproxy_SendKFNewsPageMsg_Handler,
		},
		{
			MethodName: "SendKFToArticleMsg",
			Handler:    _Mpproxy_SendKFToArticleMsg_Handler,
		},
		{
			MethodName: "SendKFMenuMsg",
			Handler:    _Mpproxy_SendKFMenuMsg_Handler,
		},
		{
			MethodName: "SendKFCardMsg",
			Handler:    _Mpproxy_SendKFCardMsg_Handler,
		},
		{
			MethodName: "SendKFMiniProgramMsg",
			Handler:    _Mpproxy_SendKFMiniProgramMsg_Handler,
		},
		{
			MethodName: "BlockMember",
			Handler:    _Mpproxy_BlockMember_Handler,
		},
		{
			MethodName: "UnBlockMember",
			Handler:    _Mpproxy_UnBlockMember_Handler,
		},
		{
			MethodName: "GetBlacklist",
			Handler:    _Mpproxy_GetBlacklist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/wxproxy.proto",
}
